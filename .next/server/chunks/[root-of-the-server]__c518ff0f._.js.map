{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":["file:///D:/Ram/my-app/src/app/api/lib/db.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst MONGODB_URI = 'mongodb://localhost:27017/perfume';\r\n\r\nif (!MONGODB_URI) {\r\n    throw new Error('Please define the MONGODB_URI');\r\n}\r\n\r\nconst cached = (global as any).mongoose || { conn: null, promise: null };\r\n\r\nexport async function connectDB() {\r\n    if (cached.conn) return cached.conn;\r\n\r\n    if (!cached.promise) {\r\n        cached.promise = mongoose.connect(MONGODB_URI, {\r\n            dbName: 'perfume',\r\n            bufferCommands: false,\r\n        }).then((mongoose) => {\r\n            return mongoose;\r\n        });\r\n    }\r\n\r\n    cached.conn = await cached.promise;\r\n    return cached.conn;\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc;AAEpB;;AAIA,MAAM,SAAS,4CAAgB,QAAQ,IAAI;IAAE,MAAM;IAAM,SAAS;AAAK;AAEhE,eAAe;IAClB,IAAI,OAAO,IAAI,EAAE,OAAO,OAAO,IAAI;IAEnC,IAAI,CAAC,OAAO,OAAO,EAAE;QACjB,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa;YAC3C,QAAQ;YACR,gBAAgB;QACpB,GAAG,IAAI,CAAC,CAAC;YACL,OAAO;QACX;IACJ;IAEA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IAClC,OAAO,OAAO,IAAI;AACtB","debugId":null}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///D:/Ram/my-app/src/app/api/models/schema.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst UserSchema = new mongoose.Schema({\r\n    name: { type: String, required: true },\r\n    email: { type: String, required: true, unique: true },\r\n    password: { type: String, required: true },\r\n});\r\n\r\nexport const User = mongoose.models.User || mongoose.model('User', UserSchema);\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACnC,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACpD,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;AAC7C;AAEO,MAAM,OAAO,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ","debugId":null}},
    {"offset": {"line": 160, "column": 0}, "map": {"version":3,"sources":["file:///D:/Ram/my-app/src/app/api/check-auth/route.ts"],"sourcesContent":["import { cookies } from 'next/headers';\r\nimport { NextResponse } from 'next/server';\r\nimport jwt from 'jsonwebtoken';\r\nimport { connectDB } from '../lib/db';\r\nimport { User } from '../models/schema';\r\n\r\nexport async function GET() {\r\n    const cookieStore = cookies();\r\n    const token = cookieStore.get('token')?.value;\r\n\r\n    if (!token) {\r\n        return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    try {\r\n        const decoded = jwt.verify(token, process.env.JWT_SECRET!);\r\n        await connectDB();\r\n\r\n        const user = await User.findById((decoded as any).id).select('-password');\r\n        if (!user) {\r\n            return NextResponse.json({ message: 'User not found' }, { status: 404 });\r\n        }\r\n\r\n        return NextResponse.json({ user }, { status: 200 });\r\n    } catch (error) {\r\n        return NextResponse.json({ message: 'Invalid token' }, { status: 401 });\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAEO,eAAe;IAClB,MAAM,cAAc,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IAC1B,MAAM,QAAQ,YAAY,GAAG,CAAC,UAAU;IAExC,IAAI,CAAC,OAAO;QACR,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAe,GAAG;YAAE,QAAQ;QAAI;IACxE;IAEA,IAAI;QACA,MAAM,UAAU,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO,QAAQ,GAAG,CAAC,UAAU;QACxD,MAAM,CAAA,GAAA,gIAAA,CAAA,YAAS,AAAD;QAEd,MAAM,OAAO,MAAM,uIAAA,CAAA,OAAI,CAAC,QAAQ,CAAC,AAAC,QAAgB,EAAE,EAAE,MAAM,CAAC;QAC7D,IAAI,CAAC,MAAM;YACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QAC1E;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAK,GAAG;YAAE,QAAQ;QAAI;IACrD,EAAE,OAAO,OAAO;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAgB,GAAG;YAAE,QAAQ;QAAI;IACzE;AACJ","debugId":null}}]
}
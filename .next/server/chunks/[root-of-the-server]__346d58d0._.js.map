{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///D:/Ram/my-app/src/app/api/lib/db.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst MONGODB_URI = 'mongodb://localhost:27017/perfume';\r\n\r\nif (!MONGODB_URI) {\r\n    throw new Error('Please define the MONGODB_URI');\r\n}\r\n\r\nconst cached = (global as any).mongoose || { conn: null, promise: null };\r\n\r\nexport async function connectDB() {\r\n    if (cached.conn) return cached.conn;\r\n\r\n    if (!cached.promise) {\r\n        cached.promise = mongoose.connect(MONGODB_URI, {\r\n            dbName: 'perfume',\r\n            bufferCommands: false,\r\n        }).then((mongoose) => {\r\n            return mongoose;\r\n        });\r\n    }\r\n\r\n    cached.conn = await cached.promise;\r\n    return cached.conn;\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc;AAEpB;;AAIA,MAAM,SAAS,4CAAgB,QAAQ,IAAI;IAAE,MAAM;IAAM,SAAS;AAAK;AAEhE,eAAe;IAClB,IAAI,OAAO,IAAI,EAAE,OAAO,OAAO,IAAI;IAEnC,IAAI,CAAC,OAAO,OAAO,EAAE;QACjB,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa;YAC3C,QAAQ;YACR,gBAAgB;QACpB,GAAG,IAAI,CAAC,CAAC;YACL,OAAO;QACX;IACJ;IAEA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IAClC,OAAO,OAAO,IAAI;AACtB","debugId":null}},
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file:///D:/Ram/my-app/src/app/api/models/schema.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst UserSchema = new mongoose.Schema({\r\n    name: { type: String, required: true },\r\n    email: { type: String, required: true, unique: true },\r\n    password: { type: String, required: true },\r\n});\r\n\r\nexport const User = mongoose.models.User || mongoose.model('User', UserSchema);\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACnC,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACpD,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;AAC7C;AAEO,MAAM,OAAO,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ","debugId":null}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":["file:///D:/Ram/my-app/src/app/api/signup/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { connectDB } from '../lib/db';\r\nimport { User } from '../models/schema';\r\n\r\nexport async function POST(req: NextRequest) {\r\n    const { name, email, password } = await req.json();\r\n    await connectDB();\r\n\r\n    if (!name || !email || !password) {\r\n        return NextResponse.json({ message: 'All fields are required' }, { status: 400 });\r\n    }\r\n\r\n    const existing = await User.findOne({ email });\r\n    if (existing) {\r\n        return NextResponse.json({ message: 'User already exists' }, { status: 409 });\r\n    }\r\n\r\n    const newUser = await User.create({ name, email, password });\r\n\r\n    return NextResponse.json({ message: 'Signup successful', user: newUser }, { status: 201 });\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,GAAgB;IACvC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;IAChD,MAAM,CAAA,GAAA,gIAAA,CAAA,YAAS,AAAD;IAEd,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAU;QAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA0B,GAAG;YAAE,QAAQ;QAAI;IACnF;IAEA,MAAM,WAAW,MAAM,uIAAA,CAAA,OAAI,CAAC,OAAO,CAAC;QAAE;IAAM;IAC5C,IAAI,UAAU;QACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAsB,GAAG;YAAE,QAAQ;QAAI;IAC/E;IAEA,MAAM,UAAU,MAAM,uIAAA,CAAA,OAAI,CAAC,MAAM,CAAC;QAAE;QAAM;QAAO;IAAS;IAE1D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,SAAS;QAAqB,MAAM;IAAQ,GAAG;QAAE,QAAQ;IAAI;AAC5F","debugId":null}}]
}
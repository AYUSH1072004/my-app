{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///D:/Ram/my-app/src/app/api/signup/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\n\r\ntype User = {\r\n    name: string;\r\n    email: string;\r\n    password: string;\r\n};\r\n\r\n// Simulated DB\r\nconst users: User[] = [];\r\n\r\nexport async function POST(req: NextRequest) {\r\n    const { name, email, password } = await req.json();\r\n\r\n    // Simple validation\r\n    if (!name || !email || !password) {\r\n        return NextResponse.json({ message: 'All fields are required' }, { status: 400 });\r\n    }\r\n\r\n    // Check if user already exists\r\n    const existing = users.find(user => user.email === email);\r\n    if (existing) {\r\n        return NextResponse.json({ message: 'User already exists' }, { status: 409 });\r\n    }\r\n\r\n    // Save user (in-memory for now)\r\n    users.push({ name, email, password });\r\n\r\n    return NextResponse.json({ message: 'User registered successfully' }, { status: 201 });\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAQA,eAAe;AACf,MAAM,QAAgB,EAAE;AAEjB,eAAe,KAAK,GAAgB;IACvC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;IAEhD,oBAAoB;IACpB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAU;QAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA0B,GAAG;YAAE,QAAQ;QAAI;IACnF;IAEA,+BAA+B;IAC/B,MAAM,WAAW,MAAM,IAAI,CAAC,CAAA,OAAQ,KAAK,KAAK,KAAK;IACnD,IAAI,UAAU;QACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAsB,GAAG;YAAE,QAAQ;QAAI;IAC/E;IAEA,gCAAgC;IAChC,MAAM,IAAI,CAAC;QAAE;QAAM;QAAO;IAAS;IAEnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,SAAS;IAA+B,GAAG;QAAE,QAAQ;IAAI;AACxF","debugId":null}}]
}